//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
 

// } Driver Code Ends
class Solution
{
    public:
long long power(long long x,int y, int p) { 
        long long res = 1; // Initialize result 
        while (y > 0) { 
            // If y is odd, multiply x with result 
            if (y & 1) 
            res = (res * x) % p; 
            // y must be even now 
            y = y >> 1; // y = y/2 
            x = (x * x) % p; 
        } 
        return res; 
    } 
    
    // Returns n^(-1) mod p 
    long long modInverse(long long n,int p) { 
        return power(n, p - 2, p); 
    } 
    
    long long  numberOfPaths(int M, int N) { 
         int n=M+N-2;
        int r=M-1;
        int modd=1e9+7;
        long long int paths=1;
        for(int i=0; i<r; i++){
            paths = (paths%modd * ((n - i)%modd))%modd;
            paths = (paths%modd * modInverse(i+1, modd))%modd;
        }
        return paths;
    }
};


//{ Driver Code Starts.

 
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int N, M;
		cin>>M>>N;
		Solution ob;
	    cout << ob.numberOfPaths(M, N)<<endl;
	}
    return 0;
}
// } Driver Code Ends
